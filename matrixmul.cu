#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <ctime>          // ƒêo th·ªùi gian CPU
#include <cuda_runtime.h> // ƒêo th·ªùi gian GPU

#include "matrixmul_kernel.cu"


extern "C"
void computeGold(float*, const float*, const float*, unsigned int, unsigned int, unsigned int);

Matrix AllocateDeviceMatrix(const Matrix M);
Matrix AllocateMatrix(int height, int width, int init);
void CopyToDeviceMatrix(Matrix Mdevice, const Matrix Mhost);
void CopyFromDeviceMatrix(Matrix Mhost, const Matrix Mdevice);
int ReadFile(Matrix* M, char* file_name);
void WriteFile(Matrix M, char* file_name);
void FreeDeviceMatrix(Matrix* M);
void FreeMatrix(Matrix* M);
bool CompareMatrices(Matrix A, Matrix B);
void MatrixMulOnDevice(const Matrix M, const Matrix N, Matrix P);
int ReadParamsFile(int* params, char* file_name, int num_params);
void computeGold(float* C, const float* A, const float* B, unsigned int hA, unsigned int wA, unsigned int wB) {
    for (unsigned int i = 0; i < hA; ++i) {
        for (unsigned int j = 0; j < wB; ++j) {
            double sum = 0;
            for (unsigned int k = 0; k < wA; ++k) {
                double a = A[i * wA + k];
                double b = B[k * wB + j];
                sum += a * b;
            }
            C[i * wB + j] = (float)sum;
        }
    }
}


int main(int argc, char** argv) {

	Matrix  M;
	Matrix  N;
	Matrix  P;
	int errorM = 0, errorN = 0;
	
	srand(52);
	
	if(argc != 5 && argc != 4) 
	{
	 // C·∫•p ph√°t v√† kh·ªüi t·∫°o c√°c ma tr·∫≠n
		M  = AllocateMatrix(rand() % 1024, rand() % 1024, 1);
		N  = AllocateMatrix(M.width, rand() % 1024, 1);
		P  = AllocateMatrix(M.height, N.width, 0);
	}
	else
	{
		// C·∫•p ph√°t v√† ƒë·ªçc c√°c ma tr·∫≠n t·ª´ disk
		int* params = (int*)malloc(3 * sizeof(int));
		unsigned data_read = ReadParamsFile(params, argv[1], 3);
		if(data_read != 3){
			printf("Error reading parameter file\n"); 
			return 1;
		}

		M  = AllocateMatrix(params[0], params[1], 0);
		N  = AllocateMatrix(params[1], params[2], 0);		
		P  = AllocateMatrix(params[0], params[2], 0);
		unsigned sizeM = ReadFile(&M, argv[2]);
		unsigned sizeN = ReadFile(&N, argv[3]);
		if( (sizeM != M.height * M.width) || (sizeN != N.height * N.width) )
		{
			printf("Error reading input files %d, %d\n", errorM, errorN); 
			return 1;
		}
	}

	// Th·ª±c hi·ªán M * N tr√™n thi·∫øt b·ªã (GPU)
    MatrixMulOnDevice(M, N, P);
    
    printf("GPU computation complete\n");
    // th·ª±c hi·ªán ph√©p nh√¢n ma tr·∫≠n tr√™n CPU ƒë·ªÉ so s√°nh
    Matrix reference = AllocateMatrix(P.height, P.width, 0);
        clock_t cpu_start = clock();
    computeGold(reference.elements, M.elements, N.elements, M.height, M.width, N.width);
    clock_t cpu_end = clock();
    double cpu_time = 1000.0 * (cpu_end - cpu_start) / CLOCKS_PER_SEC;
    printf("‚è±Ô∏è  CPU Time: %.4f ms\n", cpu_time);

        
    printf("CPU computation complete\n"); 
   // ki·ªÉm tra xem k·∫øt qu·∫£ t·ª´ thi·∫øt b·ªã c√≥ t∆∞∆°ng ƒë∆∞∆°ng v·ªõi gi·∫£i ph√°p mong ƒë·ª£i kh√¥ng
    bool res = CompareMatrices(reference, P);
    printf("Test %s\n", res ? "PASSED" : "FAILED"); 
    
    if(argc == 5)
    {
		WriteFile(P, argv[4]);
	}
	else if(argc == 2)
	{
	    WriteFile(P, argv[1]);
	}   

	// Gi·∫£i ph√≥ng c√°c ma tr·∫≠n
    FreeMatrix(&M);
    FreeMatrix(&N);
    FreeMatrix(&P);
	return 0;
}


void MatrixMulOnDevice(const Matrix M, const Matrix N, Matrix P)
{
    // ƒê∆∞a M v√† N l√™n thi·∫øt b·ªã
    Matrix Md = AllocateDeviceMatrix(M);
    CopyToDeviceMatrix(Md, M);
    Matrix Nd = AllocateDeviceMatrix(N);
    CopyToDeviceMatrix(Nd, N);

    // C·∫•p ph√°t P tr√™n thi·∫øt b·ªã
    Matrix Pd = AllocateDeviceMatrix(P);
    CopyToDeviceMatrix(Pd, P); // X√≥a b·ªô nh·ªõ (kh·ªüi t·∫°o P tr√™n device)

    // Thi·∫øt l·∫≠p c·∫•u h√¨nh 
    dim3 gridSize, blockSize;
    blockSize.x = blockSize.y = TILE_WIDTH; blockSize.z = 1;
    gridSize.x = ceil(P.width/(float)blockSize.x);
    gridSize.y = ceil(P.height/(float)blockSize.y);
    gridSize.z = 1;


    
        // T·∫°o event ƒëo th·ªùi gian
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start, 0);

    // Kh·ªüi ch·∫°y c√°c lu·ªìng t√≠nh to√°n tr√™n thi·∫øt b·ªã!
    MatrixMulKernel<<<gridSize, blockSize>>>(Md, Nd, Pd);

    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);

    float gpu_time = 0.0f;
    cudaEventElapsedTime(&gpu_time, start, stop);
    printf("üöÄ GPU Time: %.4f ms\n", gpu_time);

    cudaEventDestroy(start);
    cudaEventDestroy(stop);


    // ƒê·ªçc P t·ª´ thi·∫øt b·ªã
    CopyFromDeviceMatrix(P, Pd); 

    // Gi·∫£i ph√≥ng c√°c ma tr·∫≠n tr√™n thi·∫øt b·ªã
    FreeDeviceMatrix(&Md);
    FreeDeviceMatrix(&Nd);
    FreeDeviceMatrix(&Pd);
}

// C·∫•p ph√°t m·ªôt ma tr·∫≠n tr√™n thi·∫øt b·ªã c√≥ c√πng k√≠ch th∆∞·ªõc v·ªõi M.
Matrix AllocateDeviceMatrix(const Matrix M)
{
    Matrix Mdevice = M;
    int size = M.width * M.height * sizeof(float);
    cudaMalloc((void**)&Mdevice.elements, size);
    return Mdevice;
}

// C·∫•p ph√°t m·ªôt ma tr·∫≠n tr√™n thi·∫øt b·ªã v·ªõi k√≠ch th∆∞·ªõc height*width
// N·∫øu init == 0, kh·ªüi t·∫°o t·∫•t c·∫£ b·∫±ng kh√¥ng.
// N·∫øu init == 1, th·ª±c hi·ªán kh·ªüi t·∫°o ng·∫´u nhi√™n.
// N·∫øu init == 2, kh·ªüi t·∫°o c√°c tham s·ªë ma tr·∫≠n, nh∆∞ng kh√¥ng c·∫•p ph√°t b·ªô nh·ªõ
Matrix AllocateMatrix(int height, int width, int init)
{
    Matrix M;
    M.width = M.pitch = width;
    M.height = height;
    int size = M.width * M.height;
    M.elements = NULL;
    
    // kh√¥ng c·∫•p ph√°t b·ªô nh·ªõ v·ªõi t√πy ch·ªçn 2
    if(init == 2)
		return M;
		
	M.elements = (float*) malloc(size*sizeof(float));

	for(unsigned int i = 0; i < M.height * M.width; i++)
	{
		M.elements[i] = (init == 0) ? (0.0f) : (rand()*3 / (float)RAND_MAX);
	}
    return M;
}	

// Sao ch√©p m·ªôt ma tr·∫≠n t·ª´ host sang ma tr·∫≠n tr√™n thi·∫øt b·ªã.
void CopyToDeviceMatrix(Matrix Mdevice, const Matrix Mhost)
{
    int size = Mhost.width * Mhost.height * sizeof(float);
    Mdevice.height = Mhost.height;
    Mdevice.width = Mhost.width;
    Mdevice.pitch = Mhost.pitch;
    cudaMemcpy(Mdevice.elements, Mhost.elements, size, 
					cudaMemcpyHostToDevice);
}

// Sao ch√©p m·ªôt ma tr·∫≠n t·ª´ thi·∫øt b·ªã sang ma tr·∫≠n tr√™n host.
void CopyFromDeviceMatrix(Matrix Mhost, const Matrix Mdevice)
{
    int size = Mdevice.width * Mdevice.height * sizeof(float);
    cudaMemcpy(Mhost.elements, Mdevice.elements, size, 
					cudaMemcpyDeviceToHost);
}

// Gi·∫£i ph√≥ng m·ªôt ma tr·∫≠n tr√™n thi·∫øt b·ªã.
void FreeDeviceMatrix(Matrix* M)
{
    cudaFree(M->elements);
    M->elements = NULL;
}

// Gi·∫£i ph√≥ng m·ªôt ma tr·∫≠n tr√™n Host
void FreeMatrix(Matrix* M)
{
    free(M->elements);
    M->elements = NULL;
}

// ƒê·ªçc m·ªôt floating point matrix t·ª´ file
// Tr·∫£ v·ªÅ s·ªë ph·∫ßn t·ª≠ ƒë√£ ƒë·ªçc n·∫øu b·∫±ng M.height * M.width, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ gi√° tr·ªã kh√°c (logic n√†y c·∫ßn xem l·∫°i, h√†m tr·∫£ v·ªÅ data_read)
int ReadFile(Matrix* M, char* file_name)
{
    unsigned int data_read = M->width * M->height;
    FILE* input = fopen(file_name, "r");
    for (unsigned i = 0; i < data_read; i++) 
        fscanf(input, "%f", &(M->elements[i]));
    return data_read;
}

// ƒê·ªçc c√°c tham s·ªë c·ªßa ma tr·∫≠n ƒë·∫ßu v√†o
int ReadParamsFile(int* params, char* file_name, int num_params)
{
    FILE* input = fopen(file_name, "r");
    for (unsigned i = 0; i < num_params; i++) 
        fscanf(input, "%d", &(params[i]));
    return num_params;
}

// Ghi m·ªôt floating point matrix M.width * M.height ra file 
void WriteFile(Matrix M, char* file_name)
{
    unsigned int size = M.width * M.height;
    FILE* output = fopen(file_name, "w");
    for (unsigned i = 0; i < size; i++) {
        fprintf(output, "%f ", M.elements[i]);
    }
}

// tr·∫£ v·ªÅ true n·∫øu v√† ch·ªâ n·∫øu A v√† B c√≥ c√°c ph·∫ßn t·ª≠ gi·ªëng nhau theo c√πng th·ª© t·ª±
bool CompareMatrices(Matrix A, Matrix B) {
    unsigned int size = A.width * A.height;

    if ( (A.width != B.width) || (A.height != B.height) )
        return false;

    for (unsigned i = 0; i < size; i++)
        if (abs(A.elements[i] - B.elements[i]) > 0.0001f)
            return false;
    return true;
}